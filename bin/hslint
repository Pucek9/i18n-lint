#!/usr/bin/env node
'use strict';

// NPM dependencies
var glob = require('glob');
var hslint = require('../lib/hslint');
var program  = require('commander');

// Local variables
var completed = 0;
var failed = false;
var options = {};
var pkg = require('../package.json');
var reporter;
var stdin = '';
var stdinTimeout;

program.on('--help', function() {
  process.stdout.write('  Use `man hslint` for more information\n\n');
});

program
  .version(pkg.version)
  .option(
    '-a, --attributes <attributes>',
    'Comma-separated list of HTML attributes to lint (default: \'alt,title\')',
    function(raw) {
      return raw.split(',');
    }
  )
  .option(
    '-i, --ignore-tags <tags>',
    'Comma-separated list of names of tags to ignore whilst linting '+
        '(default: \'script,style\')',
    function(raw) {
      return raw.split(',');
    }
  )
  .option(
    '-t, --template-delimiters <delimiters>',
    'Template delimiters used in source files.  For example, Mustache-like ' +
        'templating languages should use \'{{,}}\'',
    function(raw) {
      return raw.split(',');
    }
  )
  .option(
    '-r, --reporter <reporter>',
    'Specify which reporter to output results with'
  )
  .option(
    '--color', 'Force colored output'
  )
  .option(
    '--no-color', 'Disable colored output'
  )
  .usage('[OPTIONS] <file ...>')
  .parse(process.argv)
;

program.options.forEach(function(option) {
  var key = option.long.replace(/^--/, '')
      .replace(/-([a-z])/g, function(orig, match) {
        return match.toUpperCase();
      });

  options[key] = program[key];
});

if (options.reporter) {

  // Check built-in hslint reporters first
  reporter = hslint.reporters[options.reporter];

  if (!reporter) {
    try {
      reporter = require(options.reporter).reporter;
    } catch(e) {
      process.stderr.write('No reporter called \'' + options.reporter + '\'\n');
      process.exit(66);
    }
  }
} else {
  reporter = hslint.reporters.default;
}

delete options.reporter;

if (!program.args.length || program.args[0] === '-') {

  process.stdin.setEncoding('utf8');

  process.stdin.on('readable', function() {
    clearTimeout(stdinTimeout);
    var chunk = process.stdin.read();
    if (chunk !== null) {
      stdin += chunk;
    }
  });

  process.stdin.on('end', function() {
    if (!stdin) {
      return;
    }

    var errors = hslint.scan(stdin, options, 'stdin');

    reporter(errors);

    if (errors.length) {
      return process.exit(1);
    }

    process.exit(0);
  });

  if (!program.args.length) {
    return (stdinTimeout = setTimeout(function() {
      process.stdout.write('No files specified. See \'hslint --help\':\n');
      program.outputHelp();
      process.exit(64);
    }, 10));
  }
}

program.args.forEach(function(src) {
  if (src === '-') {
    return;
  }

  glob(src, function(err, files) {
    if (err) {
      process.stderr.write(err);
      process.exit(70);
    }

    if (!files.length) {
      process.stderr.write('hslint: ' + src + ': No such file or directory\n');
      process.exit(66);
    }

    files.forEach(function(file) {
      var errors = hslint(file, options);
      reporter(errors);

      if (errors.length) {
        failed = true;
      }
    });

    completed++;

    if (completed === program.args.length) {
      if (failed) {
        return process.exit(1);
      }

      process.exit(0);
    }
  });
});
